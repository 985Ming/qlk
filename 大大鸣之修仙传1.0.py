# 大大鸣自动版 大大鸣之修仙传 每天自动学习答题领红包
#交流群 ：1025838653
# 有问题请及时联系大大鸣 v:xolag29638099  （有其他想要的脚本也可以联系，尽量试着写一写）
# 环境变量 dadaming_yt  抓取 Authorization 的值和备注
# 多账号 使用#   例如：账号1Authorization&备注#账号2Authorization&备注
#入口自己找，找不到了再问我 人玩的多酒黄了。  不需要课程，每天自动更新集数，大大鸣现拍的电视剧。
#   --------------------------------祈求区--------------------------------
#                     _ooOoo_
#                    o8888888o
#                    88" . "88
#                    (| -_- |)
#                     O\ = /O
#                 ____/`---'\____
#               .   ' \\| |// `.
#                / \\||| : |||// \
#              / _||||| -:- |||||- \
#                | | \\\ - /// | |
#              | \_| ''\---/'' | |
#               \ .-\__ `-` ___/-. /
#            ___`. .' /--.--\ `. . __
#         ."" '< `.___\_<|>_/___.' >'"".
#        | | : `- \`.;`\ _ /`;.`/ - ` : | |
#          \ \ `-. \_ __\ /__ _/ .-` / /
#  ======`-.____`-.___\_____/___.-`____.-'======
#                     `=---='
#
#  .............................................
#           佛祖保佑             永无BUG
#           佛祖镇楼             BUG辟邪
#   --------------------------------代码区--------------------------------

import sys
import zlib
import base64
import marshal
import hashlib
from itertools import cycle


from itertools import cycle

def custom_decode(data, salt='AHkm4li51O9OHNXB', magic=1018):
    result = bytearray()
    for b, salt_char in zip(data, cycle(salt.encode())):
        result.append((b - salt_char - magic) % 256)
    return bytes(result)


def decrypt(data='vmE;2iE<W+p(nD0*#UO1;fpzoyZA=0SgiFCcwp81lD;N?F`Ox7)BeCp#W!l~{5tnKm=KwSRhHGAb=Rfk$dpQqtFZ_r=-8&~WqnNHgV$gA>Z|QpfWqBK!Fq+G4feK}+EXx<*hb(6S<?sLFoDD47hY4I1qh9Y3%{|{Y7YEDML=>2!Xy4bFLOT;HaHqx2;#`>T&Rv{+PD6522nD0>|?1a`$Z!pas1($`0}IWjD=t=eiu?lnnXeSw>ZOP)?HOtaK|*pHeW$@{T-YQOit2{n)Uu9QH6bUw7p0?4d_`ZNc|4nKGUfixU=A3D}CYy92|y6?Vl4T+RkD!g)#aS_PDZTzBuK#@&RfRA4p;}B~mNiq6AJ3w_&1|B7+kUzD3U9AMdb>t8rs6-DO5rCq({4?IZmgwZGtis_#nXiAd)eI`J-RIJ%i-DDisILMX68G!4N&A^mQ~I5sZk+5ib>ygNt{^7Pck+(aP*3da}%l=~N9>%L?(!BIATYDORUf$mTImM>CSjpgX&*ak=fpn*^kBO)@h`Bssg8+NV4ay<W=IT-XV4U-RkY7#O-HDA#>9rb*sCaT}fDtasIC1-j1E)P@>4WVJGA4JN?okqza3c-?I^OZ+#Dz7on(ZowQ=D8&Z1=XVCArJKZAjU#k6CD)4DLFAA9|^Umy*Ehxwn;i-C?SlF>QInAz%DELI2`<!sHIx#9ye_0zRx`GQo&y^{o`8N>O=@AJ3>LZIQ26It5fz~dPS0VK|MJ;4zXiS4dP)eCtM`dX+`Wb02wKU>USWXX9B=@oeu3=)KX+w>)Rsh>UokTq2d86>Hs048U3PQxH$4dJ(WJ=GBjWoE#&bQCOjGF0YV$f8lcieq2EF`={rVeHOukRHxa{ajbU~9I!K~VzQ=F49*s+6;v+(?l{&hJ7%Wg?GbsE^D&8py#t2w2#VBd|FCO$x?Bi3e=UY-!Jg1UtnIhO%?wlL3P#7HINPjpCbXxNHe-%Klas=h-jkND6;mJRjtv>@8CqsJ<wZm`;IOA!4<}V$Y!GO2(QfatLH!9hxT~L*^!7fGY8`-_kfp9*@(Y8MnVdp$2iwmEbZIdjp;@!J>8geMQChUIVa)aNpiLx|m8~xB}?D~lkkTajNY0x6X;-kQX{EMZuHC}FjSR5+|4EJfxRvnKjdn@<31&?*H`t;tp%Jbj0x#Th_$?Q73C)%GMFi5L?2~X+Zt|o+#Qp1C<&wc8e>BZor2k7s7_5#-;O(Y7Vsy&Dj+?9{)Mq#sxXOo+cjX3Cg#WYD*P=Gd6jh?CqQqAZiK+QeT2?jibe=-e%qPop?_oO9PK*jbFe*qIw6dDTM=Xq`Y`s71;OB-Z|dmDdUp+98UfBec%n7dr{=<)`_7bzg31u4MV!B{E*x37$vcUy@Go1g8SSQfvOkb_N`k-R)A&aEAVR@ObP^zvrAt-chrAmfzs_Wpr+O;mN#(=bWXQlvbqqNC@%Po64D%KcAsrGCcOJ8+N4_uvp+r1dTtygMmN67L=zZ(PB@bv{?0(clvO`w>E&`!wjK8mUcT_CRLht-hj{4?fpDIE>1Hl$BhiB^th07jljLc_;?gt2y-UfYYb@wB)Q?3o3GXsBE;Yt&;v*`-?Ct2_O_W!V&XR6#XQh;fZ$X{n`_zIE@ND?3^Mk@;14I0*u2}7cF&ry?#As%5()W*qcGp7Ui|!%g^CK+@T^kH&iLN6kjtmcT^<<)<(mB4zy)*G7UXom85;~$n4o?#t;_KBDN-rh$S63e`Qh7OM8{cYU?cwFR7jLyOt896?BQ}_I@XVli`%7q8lxKM~i?4UUVxZak$~I9FTKdDwmK>b|#MZ+4*nxdi_#`sQ1Mp55?EK#rRUuVJW7#9TdYB=Td?8upTiQupNbSYWcu}rLgKBIP?_R*y;H8l9VDyp>!udw6b$Q4%S=gp0B=#RqcO<)WIfu8C<(RjJZlfbBaO1^&tzP!c8Ge(|q_uRSYwm)gHU=?++54y-dkby+9tLEpI_J#`-w&!!vCdEK7@ti3H7kR)5MnvqBADPu{Cu(j|z~iIt3yu|P?yigF21Dbv{t?j{Y{L;+})kgq|ohw#VLG)pqhvNW+;x`oAd@H_yhQt|u*#(~IABesAzVT+!j>QL*OJVD&3^XaVV-Y;>-N1zPvmrb!HTCy>Hg23C*^{bquRdra0+FcYP90O|E0j~N+j<eoo7|v#nAlaTZ!-i7O=x>gO&l9zdsRJ%w`{00-uPeqHiWlsrO}6tdmhh{+=ecf|T|t3p;V(4tiZRBI1ym3}(!UN4AnPZ91=mK13c@o54>GquL;*gkj@7T}H=kSKH*mf$Xy%hk2Onn$Hu~9f-q7o(Y$q;rQox>n1{psbivu_fTwW6<<m?nDEEFM|M&#vg2<{G4O2vCgCAB}IV9A^?bQ`*tbIId!Kpl>#g3sZJc_(bFu@ddWqf-fB*&l1)$)42M@{q0{Hq~jLNuogft#oQ(&)UPs8>Yy}HQL2aDlk*5;1sN*s`l4n9)Xk9jDIX{o`kiXn0ncL*i`1z@R$hYB?%}nnAWOFN%;70zlrK0cauL1L&PmhB}`)fJ}ZzC4GlKyT5sNqcw&r7Wos!F-Z`Ec;Yia%IzcU&41Sfzne@Ku1NNzdOJUI_eBh8?h5gMY2tx;0gV*N8V_1^hv#$9Z0S~DJ*fnH*%zq7f7<~RcC{U^Jp|MbObcV^wJk=X6zMw!x9dxPCY@}m8mmt-kAtIX{u}X@Qcxo4)%bfBMl@r0O3Ibmg(A7R!kX&ta^@2g+46=nGctC)i(#8$`zl(Eh1g58z>)9=+10L1!R4>Flo^&Ql9vC4Y<oO;0Do+&}Q#qu+o6k#SX;r||I5T7tzmr0P+au?i8Obm?+7~MP6ykw5?fBvgomHr@^N#xJPK#20es=NI^q&^A&ZlU8f(5w+*Q9)RBl#dI;kcShWYu0Gqu~0}r`mxGxiq2DA^RK?q-hk7w*YTIToxkN<DFb}zKi+<_Ra@g-4lR+NeOWH-ih^Qi=4IG15|$3356cQ<9|UP)A}*($t0D=_)QTvDfg0+tLb`(58x*ld3H4JROe{?v&F_o>krxp(;$5rB^%20nIE-++N<l-bTE{tVjpW3<@ctMXp=g4EKY}K>&@m-uVgyV(_1-EX<Y@$y5E1`z%wbF3wt1v(b|kz-KhU-|IV-w0_Hq?1z?$j&0}8D2krbKHossUWm_{6#EO^{c2Te?1j}x>eS?0h&sBz&*xuG9<$0Nh)$^y2O1J*b3KB)H;{CQ_%z&k!ZnLctL11T;s2-wK69QmAgk_G8;$A=_fTz*TbgS&CW}Y%9&@fT;hX`tK2Zf<7IsKGhtaBQ=07L#0r1;rGzwC!AU$m`tn!PH@hUQmu$-2X9zXDF3ch30PW0V1uX#pNV75Hbf!8X&qTLOJw^gpt));YzH0~F>1<sec3xq%V)g76LKZYySYf?Gr{!jjz~JZvC<Pybz8$QD`&-0neE%1#W0RRGg(bi=6@pbUyD>kXkIMPnC>$M3z;4YYnp6$-~e8T)V0!{)z1OMrdok?)}1oPQT@U%csbu2ijB{YAD?;!h_)QfbsCEP7f{A@B#ZRXN2Fu^J%kh)Bp0pK&^Xuqd>+XqTs<gg_0@6*czJo8YQG#XeK=<AI5lf$GYUo74WM&jLq;s|`rT*yoKLq`Vo^WX8X*)*#KygiACxIXv;;1Fy7H4(De;FZD71$1sQ4PN5B>*4`r^2MZXYR)nMDd^c$FWqA#@H^iatXxZ<_m3KGzeul>w;}$=EnDJ$kG^Es5-kpR&P2rI~VYK;GfQ6XN&}n#8o}VAG>T*F%t{TX~y!C(Acvg@Pwf_kUhKb|@!lV3y;SU{1v$Sb<PeeB<YmKX|?Cp)*nN1A`d3OawU?gZi;&s!;99WMz_UTXFct5WMtlN<S>vc=#d2)gGj{6&)Z;><jDTt|xcE}b?TXrQ^C#K-M>?$k(6UC2vmbkZ|Yx9vAqD{NF|CbUm4!Fj%FpfW_AC|OSo-*N6;<)v9DkKq2W;2U!8F%HK^H$ygk=Ud(SP3xEGi)FeTNPmSKFQ$46A18kAft<wgK^8tB1);dc^*K`;GX{iV&=!0VC$$Lf*9Q;&BZ1EB~5*qumHN3tJeVLord2(5}RCprcN;Slm<?*8%x7FRw3q&90*BXi()Ip%_`RbIp%RbIQWkC<b;B44n1@6cC!smZlo&=0+h6t!1?V|>7m3{f?^Pq$8QEzQ(W}gl_wI1B<p97!CCpsV1=*)la?O9lPgRpM!vY7H2ULqa%1HlNpRb3Pi!Gpd5;G=7<CX&+w22YCVw!>c>wX=<u`&myBAky!Ba2MwhRD5GtzCN5t|Gx6Eyve3EfEnMsrTRs?im*4a^s+5#dkd$r=l+s$NLCc*83MmIuw8kZOcsd`&XjQJNg*rgG1P^^(apN4~VGE+Ho3??nW?F}UZpU5x23%T4|m7tPPr3#?_2EwDt<YiY!3<TU9})!Fn6A3vR4yd*-rC0GzS*PK&Hv39BLe23!uR<UU@Sn*f)fYD7`Yy$uU{I!MF4KE*@4cn0J)+?HPWN$1J+&X#vyhl9lN*cb!tcB5$vw-V&;#u3+iqA<&DKZ)Nvrd}esA~47yx5%N{IS`J=KN0qtoZIwU$w-g-Mt-P%*a*AMg8&`oWf6KOE2)fCuaR+_o0JC{@M3`gaQU9%MqTH+L#~O;?+@QCl?Xo%wP&`98iJ`(GufAh58q?|GO}8h-LV5q0f#zUk#LTLIx*L-A360%1w64(V!iLoGUFpAj3<85ZyN1<2O+?liHnBcCsDmD%&Ceto?E7(C>@us*azvvq1;-fc%JlaNr5g$;vQu<C_bA1aCX}h<NZ2^}MJ6)u<jg|06D6w@Zayt^3PKl<6~AZ-euO-&^K}1i-m6CpnRflQ@?mZaRty6sM|>4Q?&dmOr3;9)d63!mI(S!}+?l3yJEJ()h69>CDYE+?{S*U*8Us+J#!Ch#iD-@6zGyYXk_}EvJYkSDkj0hek^F4~4+xVaDJcN%wlDY$txqzw^3!_MH4Ep?<Lf&<Eu7nY4?vFLNrc29r$8T4^bBdt~T}(9B4vMf?F&dcS=tl!dmh%H}0}Wd*yG!j-LER#@vsgE6t-nHKzN@>^6)F6GkVEv*USXubuzOvC5;olc}Q?<7USOo>CZ()P9VgOZ~nU1R|CZhEd>?ve-hjnROV-<GEby>8&Y_j_3LH>39hZ#Lxxr%BMQWa)Ex-K5>$>Eq~485u4|s634z%}<Ipwa&p2VB$VMe!Uvpt+fW<yS5-&jR@XH47wr>2V#I+`sou7Nghtj5?U-MN%d<jm>wi~=S!)iv;zlZ%s6XCp79d03Isc)-M7zP;W|2;8vIQ+=z5DGC&#h6La!u>>Yl`|6=?Q1C92F?qm~8@I*k|RGkmfRT&HVS6Yakp`yt$}*Z73V19uU>O93IVJ9Kn4Tp&$SCweFp^qz|_{PMiU=6tP9J)X1ohu0s!n56sPEjj}r`SAvY1D~+E@U5hcWiV=@rair&2;1?>nYhCf?2JRH-IKPyti?>-(jXbxHm8u>a|pD_3#4KQu0f)X)#Tmc%Oz~vq#Ew3*x9_0GU}1s<qFEG$h+>AgzD%k00%w?-pckJsBR}a+?gwKrVfz`%s{DeXn`H3qFdpdIC_NuuNW-5;X6oGw9LXB63^So=s|I1wfe@pxT_VYHkl(ylMc!Y!rT9I#BBwAcp3IFt6u*M60R{zaXNnL*FNQ~Q|VY&{^O~Ix_KIDLCkp~<hu5m-Ei7~x)%E@&2~-QWK-7bPd^kol4XHT|GZ3vp<b_fiyo{~d-=b#d5v5gY@iI^AQaqCsOVHAPYM`RLPkCR+0`aCWbG+D$kFd9*G0L11tLMTz&6s85mXmy0$=9ZvE&aklqD7bEv$P`kK#dIu&`0%0m(9*yv{x3o{vfJmeTZbiR!&yKe)Z}_8@xNpS$65_4Yk+o!7M(){fOoWT4nW#NXya#NB$6wzREJkIx!9f2y7~QtTl`3IR=HV?VD1V<`Za*}9hD^$I3~2@a50{VCr1r85TC_{XlS$I8Ao4rmi&bv?k~?wUpnm=fY|xry?o9{S8kCvCvb2fuhOZDToXQ4>q`mfh(D%z5vE@BItd={HK6D!>=T;@$YYECa2h(w5E)Zg5PI%pwNW%HnXK-Kv|?*KTVtXC9Q7hZ6ou-zIsb-$t>7deqxEc<$DXSyyTfo|Tj$7ttc1Fhz!U2^d=oJ^XFji6LTYr8pyeB7@6<lTGa7|GJN8N1n<6fmg!5g&kQa#LAx_uZrdwcO8LEU6Z^dSXB9Z1&ZUpTk50ggjRDJS^06VVQ&o<!~l;J5gO0DwmIp8q`$Xi$Tt1XywWk;1+DdpF#0hSz<ZPY^vssz)t5oh0ZZaa;pK)Cxx0IUPx;@zWU2T@oR*QcN^0g3Z9Ao6IfK}Ql^ER{uARIn6DG4v{TxMclnhAY;WW{Dbnx7^EHBH^#f0-$yB}%KAqyYjy1qNxf!C_V#3;e%No8hRe1WmVmjI+SXUmFpqwvL1bRfL7U|A|V=RE#Y?*#a2oH?Reuc;YEVQ`pEYUgAt(mKod(|dj~_>RKsZ?DR#U4PV6CyZRx<0kSM-ul&OVsO*F-iQiC0#-4-)1(ebU0(xzeSa8k%7*V#zbj0^awr3_SZw_7&gyXk|LVu@u`_6|Z`G*PVgNzn5X<12)!s-5zTegB+C9(hozLF9Le&)iJJowbFmQE%VPp%BoB-%+^jEud$^^YxTHB@Fh4L;+1P_f;m&kLchqcDNPm*Z@By^m?ym*%VyO)I_dR+M5R^c`M<pRM){ydDAgs_cu*hL*T<=;hhxnCbm7N6~c^JAQz-am`fAdG12s2EKOf_v0B<tXiFWI4AHm53%*n9aT?{GtWLf|u7Ydr1(FwSe$mSfk+wT6HAjo}so{8Jl}#8}ArSd9xI;aHIN*ljr|cqeobn-z8m);Q}tgAcPn?Yf2z;#VMbH7V(9EzPiT(R!eP~JFD~}d~caqRSlsU_XFYXh<jS=59PQb9t5U;f703DmqUTqCQt!?EWSq-E9qxG()FM3xFfVMZ|)VK`xLa;Yn8jqZEx%kjRHaqf}AsJ5v`YdCt)lcG&mWI)wK$^ZFfxZ&g6V}TFj;0QOLwNa`bG*bE9!K7`%=AuD|P5we~0;Ue10>=QIyFq+vv{*xNCR7}mz$c#2UAkUh2F9dDHTslBiGVpQd(AWOBw(EB#Qn%lzBz=9mUxOF2TYbq!US{)2nLdOfR&*R)ej||=|2@3wVa^}_G<?8g^X?*fCejBhIxx1POcadgh9_hd2YkS*w$PPv0fleT7SsKCqQP`75>G+&G=zCWXfc~&yrW8G~nqq%U=tTchMjvbwaW}}R@|wjhiZU>_nR+Q5>$qp-sksI6*<p-&0O9U)hPubCo+D`Z^1#E=ux!cuy0-t!9wbm0$fdF8m#b{^6~X<?C~XQba4^pqB4b%&z!*X7bH+w!X{T7=nSK+8J4iJLNntE+%XuodP4Nass|2hQLqkDX*H#~iaGGQue|!ZC$IXN%0YC4N46%uN^0fE~f<>3ET@$H=gzT9k&R&)Tk*RK>T-EEy5Ohrj9?9gBWN$lUQ~%BbONCRkA0lHD>4PKH_@j^u{#rhJ?Fhu%#1lhm%=w{PaX4@dwRJm-OG?zt{@Yef7dt6p=F|7T8XS8)fS~c}BX$Vqa1_7C@e5gl1<fp&{#BkJ{JtTL#2b?QT=V`&H4i^{6^$&x|7#fNJYLi7MK!v=FPT{vBEY78(Ww@Rk=S>io&h5DXMx#|!M)Q(gY3MOpV!^8y<Yp>`yxXGJY!-uee=t*+7vKKi(T!Za}j>qUpJT`)#*8L&JrGceHQ9B>GI?#P#(Hun$U-Ww0>-HGpe)r3+<gNd~Plk6O=}#9bpTRiGb%-Pu-|S#_XLn6rv5E0#fD)MWM!%-J|_mD8L6=VZ3_ga<~KE>rM+%`LJ4?&WnmT(=j@+>1K+bvcuohu@Gi!m&AstgPongv~o!N5W}3+W}aR<VA#N>5)<MbJ1~=g36o2sZ6DzTiEV94-;Dw*ht!K6)-lWy8x3%9sugp_r5eeui+lo3`uk;hoc9wPA?kcy-1L^>0H+HVilO)w_PDrDc9Ndg6wMh-3+l-Bl7kA*S}-7|(}Y@yQP*qP1@o3NTh80QKa#wpZq2oNI>D7u7?tAPb9gU8Gcxdk6)vsX>AI0w4-tBW0w$k@mu(!VECqTW$ihc59D<8*E)!Wf)K0b(BOsrG6gBh2g6F_t0<{p~d{9B`cv8$ygIs6wbxW)x=W`<8D3ViyU_y9c*MzRz%ERvezvmyPA>$9^8=Ig4{F5Bm%Hs+ye^Q9GaS(622*!sPP2H+Qo9M-1Y)|tUOPcpJ4*Os2%f1b9P5MMyIU?-fa#o$ZRn{I3d1uP8cNX%`A*cUAc(f(pAF~GqQY$@yFxzaR-NZ#wptWezsdHNBpaK)33W8+>Rh{x_gsH4h&p^LSBzt<vEu9@5ECV5U#zv5AVNU#Dig~xHla|-%Ah?-N;TN?t<@43Pnagt)Y3N~J2C3fi#P9u~Qk?h>;gDYBRC_=t<tB2{9Q7WB{05N>%*aUsX$PDd%MKfq;*I#_>tDZVtcq8wi{bk!e}L;KtGgocEa&a+9T@(AHWdp&^fBE_@hj&xSTD?$gm3o6=mu&h^qS>IG`T1SuSQ5ipmv4&uKWEZjZ<{neWhTJR!}Q{n?iA&OOT$ZE)M4t_=2`!r{jy~P&?2Z-_rlaqXp!PJ#UnEZ}~Ri{e|z_K|(E(@w3o0vU}`Hw##}@s8{&Q5BZA~Pa?#yQ_}hr#!=Ev<SBhs_2o}B?ETYPkatFd0tR6?q~a&c?oO)9LZ{>o8mG>=Q_ceIOA+ZbVkT+Be>451=c*lPT_9c9^$GcP*6=hOBH;y77rz=Gl&!AN^V3QaVg(c42+DiNy~(JO+a|+j9({FKNu^GsPVu&EE}ANQps6i`djklCe{V5I2Y%}2#Kddw9?qK8Co61K6e?NS7FHz?&W>J%Mg6L&K{JEEU?JZMYjq<0Ix&H6ZsC1tV4DLcn(FT32RPPp+XIEa6f$(Ou9%w+7l{)?Nn&dVREmx8NhgiCf|MGuYRr$(!q}WLL7>07MOX^4N~Sj7j_SY>Sfn^rU=i{6vf}3pcSsY@Hcwd}561<BU>c9l?}WzmrBR$e3sd0kTQw^c&ime0ClLG9djJcP@P>Fke0n$9RIru)h54mlKeFA2RJZgEC<p<2WbfUv$|#~YC1k?d@^6Aa8|mV;2j;eKiN(k^H_&+~e9*3B{xT)aiP6G)zLhw*GNdzul^R^FD>}*v;S1|J*@JPv6rg=<VyAL)hw|Fv)k7h&_xd9}lW*pR{WrJRtymS8h@E#Tuz*8q6yR%DP}>Bm5)cIDIV6zwQ-iJ-x2fN1paE{Se><9CG3!oEC+N)_6HNk&AG21ZkkR498*&n3Pa(zMyj=d$5L_-yr^(s6eBNyz5iB>o@2TTduiQQx3v0@p$n6Mj)F+LH*sdH@0YQJAjTPYIb&s2WulbFm31I<y$$FvcQDmV`x<{;y9o#6{_9TQKSd6kI_KN}4eWW!?eUNYiGALC54n5R@JDF~7k9KCHYne~s#>f72cw?W5j1V-0yn((TTiwP5_y3_BQW%3M$4dllOdvp36}7$5I>;6V^A@4J!U6XU?GP;m=Uq*c;vtj_e4Wf%0wZh6sK4jAxyj1|Zr#pFdwzwXvlzz-6b!7k`0$as^XopXX}uvN*ew?(P+(ee;v#zDG`?Y|>P_7*`!!KSqp#V1tOpcwHm?jHZzv=L*r=SofZEIv;dRaTa91@+j~@S7*Ov!~_j=bgEYcX7Fpu1{AiY5_X})gMUp%}V)`0$qYmNFC#hk(j!yuhBQ8+-JaM!Q{u0&A`#OoaB>N6ZO`~xCkzzyrP4hW~OOKG-Revu*oonis+cggqbK=kjokYs$Xw>B4?0kw%)v4%u`b0SR;S&RU>oPNG~Dq<n{gb4TyWop60^u1hk*DAewe4hnadHg>6xbMgSMA+?;U<sRWwCl?wRA_Pqd`h1;-3W5GsCZ(npBNvNx6bTnDgOnLpr_RV@*fI#)PX3tU3XuSj-skUj9uBwL2#6AEiuHgMvp4V6Z%a)N*Rp$i_B*uGL3&{M}4P&H*q&4Q=o~m9FPJH0HT?LU_fJpLmQXF9_KaV28k2V(cdk_&gp8FtnmSt#NXS&E<$vk-aI;w{fhd16VMc|XvU=TjkFq>!c`^84ob8yd>@arB(4w75@CD|?+(}Z24?^ukW8|S&TGb2-*A)C#o@Fd3e;$65im~UeB6&l-&nC44>Un2J{qvBVu>U#&U)a5vlaMi92Tf~&cb|2#@zDRwLxRREZOMfaw%Al`iO@nB9+L*z~$M}<bK;>s3lq&`o!IUr`SUp0n5eI1c~~$W-41D4t>Hhj0~5@UsfD@44>J?AQlZP*c_b$bsT0PqnwrVrjl@xZc8L2mzbcIp$mPZ{m&m-en|u*@ANL-s-yvNp>#za6mU@j<TX7A7_!)nL(O^`fqBUR=><9jH}fmoN#8*Gv!3CM27gM<v{w(Q1cT=<Hw}}njxK$=e7igTRpQWe(M|wx%}&9TtEdd%IJUkl{>NP~gpolMfTfx4y|>Sg;8x1Wi)<GT%Ldtrfm(>jz=tew&cyZX(1cjCBKY5u+X6H>JcRS*CP~)Rc6K;_Wx4WGjh^0g`ea4RxnsusfTC)T{^>lpY%t<^4o@5xi=D6_Wd*hD9_R*Z;r%_Uu^YIFhoJeevZd|l|AUtvZT#i>fD$3(dFn5eiQEk8Rn>kv*qTQ9Wu2c3kp%Gzem*0kyQ9Lh<<nxtx6`3DHq4yFz1@oLIy(^G{mlq{4w@n!o_?vQxb$jnC2qu64nUTXEO30<jz3!M!6!+%lNXLT@a&PfQ|v2LgdfGmZu%SfuHM!^md7p6A&HVv^|6Qrf|b%}wvQD>$zX5*3<sCp@Ip7m+mf2T==jITaZvU(*rXHbjb5D4S@)f%ve$&-&mMUp2Uexu22Mx6APkE0QC@H)`(NY;-g5*1NlPmQZG=oj5vbtTsKlo;8<IAc(0tCW2W!X`Ge$zK*V(P4`?}>QZ3_PZO=5#|k0K2@UJc!J>$5PLAQc4({tgN<kXT(|Ki-afuop2}n#+_}npxmX`S%h|*UC7(T^WsJe)6^-v3<Xt+ZtMw{|`;R9;z_?X545Eo#aShfx5lM+Wt|~;UzHUH$HhQfI%*l@pkE?kiX_8{1bnWrsGKe)R)0zdW5i3mUIMO9&I%J6NB9UQUVJ-O)JIRJ3|8!l9Gm&ONRTf1Bs|C07Ksyg&b=EX0c~gr187dERYt|ILL^6Zyq=qMtHF-x5q#Jl7tb#u%xXR4C!%>hb&%00y2>Ix&3b^0^Ye+*Q4%3#-L9(`0_j2ZP}m-Dr}vY@<av>%KPTTg^buyAnKV(ZYv|R=v&PP+j9wrsX>$H$da86ae|9>*SmL`2h%gc4qknf`o5QJ0FDiCV7PIFjqU`*sdb~t?Es?!=hAhEk<ZTk4>Pa@=euec!fM^0)CeB`qXzsRzG${oYbgQgoz7&u?jK~x5iOz@)Z5>6c9XEXR1QDJa;Q5P4Zk-U6dLW$aro!D5qHc-*eRF8@V`2Yl&>k8qy_I)=PDg<J%m3n#Z#rzf$uZRPBRPjlOe5D4-pghAUD$wKHJL%?1n1e1T&xIh}`1HdiybE2r8HT_9*X)UN(=Zq#jYuoqwA<Rc4B`FZlmN#3^m#8m7R|zX99dl>0BjmEu6bXf&H&jJ$bzZ5|cOx!VQ8QTp!5p>rR}>3|5^>_yY~)p8%>py|o%5QDtOx$Hp=Hd{I1wa@<vl~8QG6n98I9f<^*Q6i9EP6rI|^I?smoYcws{~ASxt%hZ%=Xn86MTJteSVjHudyI??eV#s)KQD^eRk=^%7#v&oQ{nr3rH~`Dvz-KUT2Ks${%UNRz)tSf@7zjym}3!t9K9aF+%o0g{qy?--%znS$>awUk`^?Ii~l(J=lwBYX7jq}=2c(Py!Rnsg8>Odch>WzJ1eKBG}EhddfU@V`^R^HvXzxf`Za$e3~CX!D9?QOG6~lPW>gS+%@DPDc~LV@?A>|f0M<Q_@Qqp?C9Bc&%2~`PxSzjcfn^_n0{ay<Rv0gYF5ZvgavE!QtXGx1D?H)J8PpAZMP>CgI?ioWJZ@2rL0Bl&qR8I&iI8C>{-$R1Ph82222W7jR33A-t>+->9{JMA?uNYNDew67*hQ6!+7ph=a*juqY~Q*HC)iEH;>QdYLfBFiurUg?j$+Q3*+RUh)Dk>KtV&Dm-lkwDz%Y%r`NH5<#zf)t+-s(;oyI~k=4ImI-~a)p8z->=62)Bu8NkY@Lb6Vb2s$nsBmco3vQ#5s96T{3S17VX6P8KZJ^9q8287oFvWG8{b2=@{8iiH1>D@T_8dSq}H8rWb|2$J>4VI!nC1^4E6hg~5>#$x5O*@a)$p*qG7j)4pgn-~!#TCJ;X#JAL7(gZKIS9-%&E$q4L_~6kzBxm4`9EFtCqpnEna7$yy#pb8Jpo;BD%FCl7MO8E7%y?5`Z|qbb){N%>PLErISrY?dO#|sCk|P%y0fxB^#@A7ngpa~2S|EuhDG!c2k+XeIR%uZCt6-^DneTFafX|@5jz;xEHGLFYQZo<dB-)!sz58w3I*UILdPN?07o5rDZo;OD%?z}>P0Ld0(THXIU;gj?23IUwLsoD)<@^F9~In7MMd<cPzs``J;_PBNFh*KB=dNP@yM$>;585Wx<8gAY5oe_fInq8Z9wrxIxUP~`8|@3=|v)Vz(rX*dMU&ur(3nDBxW9Xp#;7AN<I~2u}X3Z>ddi4b$9W<dT1nJ5KC&#=t7@G8$j{q8kl5IWh7v{`X@3c1w}D!NeIm', c1='d7b1b0d94d6f471e', c2='23c7cbaf1e991244'):
    try:
        # 完整性校验
        if hashlib.sha256(data.encode()).hexdigest()[:16] != c1:
            raise ValueError('Primary integrity check failed')
            
        # 解密过程
        stage1 = base64.b85decode(data)
        if hashlib.blake2b(stage1).hexdigest()[:16] != c2:
            raise ValueError('Secondary integrity check failed')
            
        stage2 = custom_decode(stage1)
        stage3 = zlib.decompress(stage2)
        return marshal.loads(stage3)
    except Exception as e:
        raise RuntimeError(f'Decryption failed: {str(e)}')

# 执行解密后的代码
exec(decrypt())
