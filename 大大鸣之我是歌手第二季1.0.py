# 大大鸣小龙版 大大鸣之我是歌手第二季 自动学习答题领红包
# 有问题请及时联系大大鸣 v:xolag29638099  （有其他想要的脚本也可以联系，尽量试着写一写）
# 环境变量 dadaming_dahys1  抓取 Authorization 的值和备注
# 多账号 使用#   例如：账号1Authorization&备注#账号2Authorization&备注
#入口自己找，找不到了再问我
#注意！！！！！！！
#和第一季开幕版不冲突！
#开模板0.3
#第二季0.3 一共0.6
#   --------------------------------祈求区--------------------------------
#                     _ooOoo_
#                    o8888888o
#                    88" . "88
#                    (| -_- |)
#                     O\ = /O
#                 ____/`---'\____
#               .   ' \\| |// `.
#                / \\||| : |||// \
#              / _||||| -:- |||||- \
#                | | \\\ - /// | |
#              | \_| ''\---/'' | |
#               \ .-\__ `-` ___/-. /
#            ___`. .' /--.--\ `. . __
#         ."" '< `.___\_<|>_/___.' >'"".
#        | | : `- \`.;`\ _ /`;.`/ - ` : | |
#          \ \ `-. \_ __\ /__ _/ .-` / /
#  ======`-.____`-.___\_____/___.-`____.-'======
#                     `=---='
#
#  .............................................
#           佛祖保佑             永无BUG
#           佛祖镇楼             BUG辟邪
#   --------------------------------代码区--------------------------------
import sys
import zlib
import base64
import marshal
import hashlib
from itertools import cycle


from itertools import cycle

def custom_decode(data, salt='PX6FLxKaVOiUOJ3e', magic=5695):
    result = bytearray()
    for b, salt_char in zip(data, cycle(salt.encode())):
        result.append((b - salt_char - magic) % 256)
    return bytes(result)


def decrypt(data='2XP8O=EHUR3#J}oM_B7<0zL!Qvcx9K=&<l*s1bze7-!I#v_Krl9-{3X_Oipq)YNU8)JR^#%u~Gm7@gv#rg}uKThEh{c#L7xfM`KoP@LDHOZN(%xecxskPb0U0=^SI0g8}CT|;5rJU&T+3e@&0ikep!Bi*O>iKuAPe@d)xrmQ!S+lUR1<O6LHiskQo__7<6CW!Wr=7zeT)0EAC1GY1oUft&^%-*q~c(PtN0wz9h^kokdf-7ay4cv1SX>|k-lt7<~(+=^c4vl2Q|Br#cKp0n0jd31ne%5Na%BMDcP)%-b)u_r}PFJ-3f@;B+OwA{UEyHk*AC@@4idyMkkbQ@NZ8PB`iBNP-I#y?&ujz%$jp)8(rxiSNX*Ka&WbFTik?du=hc;7_>Z%0MjC5y>Ylv)Vje25eXtZbFk#?qPjh8^<i+?1S*cBa{@J%8wig`ajR5BDo2(oa$mUu6fZ98IrhPI9$kT!;%a^0GPZKqLV<aP9PKnZmXf%!jQRk$A0PLpRaO0Py1hD%F1#fMZM#PldRQ>dhAgwkG1<US9(%9X_L5p>-w;Bn7W2#C`KzD$gLO0{P@6ormI#Yk!ffzfo_ibiMO-ixLq4G3o|eb%Cb$F(WDl-Y}aO%(8#>Kr5l=dW+abjzn#l}}SMZ5AKi#u8tC6oA$DeMlMo5J2t^I(VrWw1jDoPBUp|p4#(yxQe%r1WJO7&4GY3Z3Z(V2d{YI5pI${#RzO^{*_^XikpR>jTI+^Q8;)bg&L$o#-~Xtl!a%FO@=Qch>p`d>NdNXdy^-`hi`c|?h~<g39C$g66M;`jMRg^Oq9z%YV~MHgsc~79j9SpO41xWO3fEPREc*VX6R3EE*5DdQZI9FT#bcK?RaXTY>?2gdj5!)6B|nsfZ&^>Mh0@E2R>Erlx?hxe;RQ|ejjYmfwgkgAPt#6C&jRu4wI6<O3{0shV4s-7l_S+h=t7PYW9O4JyK6VfUr70#w-iqlCsasNMMDUZ*RGrIA~CmhY2#l!z+$jiB5AB`FGa@@iL9NUt4)xIEh)hX3JrR4%w?Y?wEqIVN&9UkjRQfW+038vzr;4@*u1qt@tMZAD8D#T>?O8&Q4ph^~-NlFwexhLq2<HzSy>%cAF*}1lZk;^QB>GGmeuY_{d|?W2>{xaEJ!5^G(F=pbh8tfb-zaT>07RKxuV<hNB++F=Y^O?E+5VJ=(;xJX)!)OqDD;0Mv5H37f)*aNk<^L0>!#8CGfP52!w8WNKdBeZ48XIr9k$3-Lx2@%0?Mu~F%L?mY%ToGy37zJvim)q&>*%GLWx2sB6Uthw|-@a=<}QYj5bC7xkzq_%_3#rDI54e(sv`?wkJ4mR-dXA*Q(MY*`#RNF$d6a(_Ay*}n%mK+IQW59$oH!Bj_BKySP@xs0}8q~9z{qdeN69G+9e^t3^K^(t%vmMUSmu+oZ^g0iJ1rE;mSJ1N0B{~34QzLwPB0IZc=qhQfG37j%FXwhD<J*wnT_j39y2Vax-MZf7eByt;_wZrQ@Z-)FjtYPw;ddTjNjxpzE33oSuI}y!1jpuQf$&di5A&{=V?i{9J6`g|rst}<n28=h8@PPUJnK!9=4lhYdnJF#Gy8mNIaDhmR*j1Wj5S%<43t$hPFD8X(xVl%X-IAAWK8r#2-Glwpa{jPnbRtVt0^fOzVlB$aLg(iwfl<ama{A$ufEeXgR#wDKBBrMUU_;pPTNf(IJrc>rYX5Fxl8~kNLh7@tvXE&M;U+&0b>Q~VHaEw%7#?%l=z^K&MIO+p+`*e{69E0-XIhg{W6H^3o;m2H_t&dPRU(O%vI6y`Ynz86)W}lVW5NQLdRqvf6^cJ20@_ZzkW=fUtivBqB;*<Wm?QYrWKt*4X3Fohh7TklbNjw@iVrSZvrC~m=Vy!{s+ivBvoI__(mOfXu@@?{Gcw7S!+GU<`6SZ5vN(f?isHKXi=?2(BV+8(Qitsc3d|?&5x*>=ax<GYPYXm$Z*lKR>-2P4&zbMt*df)gry(#4Q|NP{>TMB;_Xe7^E=!F!~`6!Dng5vBJK9H*jy+vV=wY%p~;yGL{Z;IQBA3I=;TBmhhK3DYL3nNIr9x=rfnrh15$MEa|$mNN`FJ~#pQPnZ+0n2rThWuU^3J%a{7)8i6X1n@FXJ{d@0sE`8tAj6Q%$$*a?##8&U-3fmO6Rf0Bx^D#l+Ak?mwG^-}BIB)cv8+$j>N662t(URi`&8$rczMXTCME&Ivmy>6d@;*|tTnmi4uVRdOq76)~?EVlHDIhP^wBy7=Cz!5tI)gay}eT{gRrA{rQ6-Ep}#%KgW_oDo4ztAZMMS;jbsXH0r^A7+Jt<wTOOsuq73MB%Uw%yha+xUXMYGC0p2r*brPY`5b4u*-(<Z}HwwrN6IzZJt(-ds>EmQ4gbyhzg3Xuni8k>7#i;r`Qsj&@Dmdio~EF5EP*%2xORax;?02QU%y?KHt6EF;V73F3PsF`?F-c~xKt@ft?qm8I3oSF1@9;Ug*>;!w@yp~KEDmst3Iw_lPN#3LHzGu_&W*U`6SSkIzMHu|Ir-@yv=YnEBUJf(2#ALaRb%rxl>{G;uWybFrA{Vx+^X#7^MVRG49Y~SJ&>|_UdF^ToNI$sD+q}Civ*LEwq;Rf?aaYa#Vry7Xsol@O{&!*O8k-J=J#MG0pR8)X{T^^8<abl~}8s*r{xn)NbPC=HM<U8EkFx7)iaG?O=^Dg2OyJ(+#{%YnzZb_71OJ(13-LFKV^Cb93_j1co%671n>mdNxJTf9L--zGW6|h@h*EG12m(&M<+<`E3ImXM4cS&4rxDCFf_MnCu?82^P=*tJ%2);+6qt>j2P#<2+UIa9hq<}7bt82t_%4*W^Dt5@n^%xVcISEZ#>8=+ik8Q;P^P$m2bw@a*99s5qd*{fvN<)uGR6%oP+GsGcPN(!T);Jn3mR{U5LEaka3tj#vdc!ZnOr0;vKYM*za6Hu(iBHS)=P@``Kr?EZa{$JhbaQ74h+j5_ob)g<Zqlkx!R4qR{Ej&Wa7ZxSN4uLbMiJ5{J&j#RGU*8tNetx8`?2rx3pAEvfBZpC@BAsS%&sWFsqR(!F9G5a+iWESGCE=VfQg&cqumsbRx;xJWHhE6MAq?>;uXhyaR)c#<V~gT<a(n%pPf@Q!xzgvxR}5;o@ns|Zu%i>i3SLc`$at0UjK6)r*2xur`Ett`cV8cU?~&bzT7-cBZFxGSbC4P-O=N;?(wqCZ07-<%uFRBLx9A%w&3{eb9BPB7LI`(S`ZCDUfiQM6t}HEnGo{(UPoa8V@p`k3cqeRN!XdtFaii6O3w{XtA7C)*+`HtN^AE_TL*it%B2lob~lK-yS-VvU#6BvW4ZyVM>P(L0=YWdB4ntagGcnx7+XtI2RbHtczh*Qdmrv52a?X{W=T9~pFLJd&#dQzLv%t7egl#uM<ge`<2L~?=kk-{9gu$0kTSDaZnoFbmD#v6IV~UKy0eRiSt^;U5;4HLc{<%^9{n$ow6d|5a9J2fU+~)WxPCC&)0blU_9r7a;T=?ZYGCqCtn2Y1HYIXej+@=Pk;ajYh6>Ga`L50E)P@_EY*P~E<HYlE90dRqjoVDrxm!6LK67<>GvH=Vx{+1mv7L@sUsy>@;+|tK(PFnNNL$Ovei+hsCbA;4amhbqjG47t>+Qi=d^#NRHljc-QbJ%*$~NpPV^<pukK1r6#w)zF8ZQy(n~V(c$Yf~JfrzNS%7|9psUx{lF}{LThyWcA!VEC=BR>9$S&h+<Z`aY<-uHD(=<!^O+67h3crr^?wU-=uo*-lQ?e2?`kD5!dmbLuu-h>6asM}HT6z8w-NDv8)gst=+o$&E6+nsjJu5OZ?__x>o01e`Ssp5moUW4|f53-^6^Y#D6A$q>^A|uLTIf_u{2c?z3vbO;VD676&*bm1)`pEYZ&G$=@C%|G&1XV>rH>fYmBXm_<-=GVmIBD#9z3`Lnjy`E8tfAs@<M3=%{cjv<B=rfkqMq6HTy_t+VTAzZ$jRYW-22GR?YR7Mz#SUMOr{qs$<31S8_&y&_ldW|E8sYbHTqKUeOwSv0+H=uh?XV-Ll&P!bjOtiIMnA^v5+FARK{{Z#zr<?7P&GIV5+Y8WNb2VjjWDTWFNcv>y;HXw$&4I4e()`Heh9=^1rQv-tqq*ut@hxc$x@~<oiRG1fK+Fi~_;j#eFPMbIh1ld$}pI&086(Nagkd<*&7lBjdGhL?byR+@V@V7WGXGrz21{Tw^24c~C-G0ClLpgoR*Ovb=+tTk&lCIw2#1Xg3&xUGAv-N4P}0S4Elj3U=uR1!p6PU%xj4H~-a7L(|Kvb>x&oIPy6NNu4T9R2!Z8=1NVQ5hAM_^OViU9~DE*c|@%3Zfy-mrU~&$(tR62$cTI9zHkFG90-s-8=5LB>HeN#xsK2SzX=CvpWG<eStSoSKIfzEgVN6r@Cps8`o6QO84lOQP+UBK+2p}>n(53Uj%07R`9RcYiq~7j;I7MafAjcg(_)O>C#<#d&vqJWeHc5g9&?eLbD|#C!4Y+D`(XoX1l$_Ety0(IV=Idc6BtPIfb_OkLIOEnd$i&%iQvc8pdAtdYuS@=*8RFswOg4<ueTfu`wh?+q6oM;)fwhFrXlMS#Pq861l+A)-GJ5wV<khu8gC2#nbJ@qB&9PLLMRrRS;aPbX^=~E6#L$GDtw{gVqixAa|M<v&R%jHM2KY7m7evR^biLwvzej}%dmFhYuxoO@<cD$9Qe>Aw8^(E!rNDh+~CM=N#FBRN?mr@Ee-er$m2J_;}F<U`2T|{Po?UY-4`5MCIWmud0wkzB;@s%%u2B|XOk^=dK>E1Vq*NhJ*J5MS{zV$CT)F3cy~k%lU!Ou0=-O`Q6-P$ULJ{^QWSdYDNASEBN&lwLfzch*vxu8(^YsqxBJ+Y2Cu)8K{CQ^WGVt)_5-IjEh|jrPq1J)>CJ_NF=*!-teR@_uw+O77cMf18V7V=SXCk}Lh=q?E3W9eOac4PbzUe1M<5UTE@)p!fvi-4DZ0Kuf@ENuY8unr4XRtI4E=z2cGEfX)k?e4LYtE4XADG<?QG1n<gI9uhkBBFsqCU#SYUYrsZcBj@R=4bmkmg4N`$VT&?;NpOg;Zg<#reD{Y-gzBlr#4<G(bZhy8FOHA*gv0jgSJKMKYQN#0gDTL4Ig<?$DHYPKJtqL=YqW~#;1IcprucUPP+1oac+bX``i=3X(e46_(8j=*muu~A-Gl#4fOB6>C}^dc>%Fc%63GMlq2?zxpQU8g`lLKBGJ`b~bNPpQ4j!QV#u^tO7<YYy#X|9kWac;B73HVct$_(s_;m=Dr|y3jN@w80`EwnkxlSZQ7;D$TU-7VIY?C7k)j1^ebgA?mx&8<#vv=+-Q*28iN4k$aNIFv8Xy0g^{nprO7S)bHkQn~p5sNfbVSy^T2GYtrTW0G){Lz|591Uz4i;T<I&u8CP5Pjm9TQZ?P9C^6^gq$>PB7#3oZ_?MNy$05qg8N4x!Qm66HZFDlZ}{FH^_#GAZtcUk{Y%^Ln_oGuJ!9YVuvTL<==KTUuj-S9LL1gJ2yFP&m`8T--iDZEaN@IV6@Mh-ef%q>&cb!WUQDN8al4RiLX%F2L%albvEr~xJ^DIDI{S<fk#YBw{688%pLb{y_rX9ltAWl*{M4m)1}N}{Z)Y5ckj-+hZ7W!S$qK6S!N+MAiKra*bR)jqK^9S;|We;IzkXaE1LNaqp&G%y2fyplmH_Px(-#X17q_{&D&A%J$EXj&spVL<uAt!-)ebS~;c#PhT50|2Ve5J_w8Fd_Qr$cag<qQ&3G`g`k)Bd5pj_vuCg(vZ4guFik8ib`QyjBzkTIF%(_sUDOLz*f?E5jtQGLJ*_*IyCbqYGxym$}>efbYX$ug~aKrymTQ%8|ewn_4@1qfes;i6Yzy$qQnbqWa2Q^WQ-KAGqbUFNO-YYgme3GLH=>2^6Z)?YtqhHv^UC3!>#hH)f7c;bI{uW$G>R)+%b9v8^;;e30HN=#H>Tt`vpz6Slbm_E;36FGpbO>dUt-m0^v7mStde#C-D@+=}&#W$UsvTka^C}NEuot0U#xi$?g+8!_>LgH`8_o_(JpU>?Ivf1)R;2xJbV7amy+9giykFbWG#_dU0tr_q>%1FK73@F|pxFI-LhXo{~^Xv=CE{YEa5s{b>PMW<%i0M5%}dAg%{zvqy_Ew~5p!P@*~rO)O$eKKm7($I@vAogT*+vH$BPJY;{Af_VrcE6*6Lv%d5aKWeS)7@uh7YEe`MkXIV}#^TEEN$*`44GjMJ;j!{gV5ptE87Y}+xdoa$on$!|FnNah$QOA#h$u&#nYwk+y{!8qwuL@=Kfm9^<~7$yzFMjqG*oBtVS{UTc(OI=#byytcCt5%<MnGgRjprZbbLuuS|bYyHbWIn2_BQqZjLNmc4I&P;f0)X{tZ_`yKp}yu%+E;LZ|x}8Y#xx^a%v<mpup$q`s1rX7^kfc%gj~+tl3z>N=OqJ^us<L}=YGXDsB*m22rwD^hj!OmwK?Wu*H|ZkUK%K5sh=HC@R4T46!TbFW7!Q~95*U~m$87yL)_QD>Fb3i{iHx$ZC#1j{*a`1%cjaNA4C*7QQ_>%CwsOSs|0z-s1(1v>FZ8v+DXmxO{?NZEG@+VnUeyiij;!$^++Iq|R(=UQQP;X*)QZd?)2p`AbtI^32J#B)~i2fK%{swm)!Wv`2Mxd3lnl712?=B)Y}tfzTE>>(QjHfrHf_=ALAG|sNo2<N4vL~)3=K%ewjV{#*mpw#40w&27&(BJkh+~V6_5>qasP7TJD?91XJPRKc2+3H5WGvVaf<HVc8v{w@@Kw#m7XeifB*~cl)8E#1T=|#qkOW`CbeN!k#`=Ht}ixVm}s}qzqvb)#^ud73?n%mN=wYcICx<I}g#F+tz*du<yQoRjz>R}~Mc#tZY+w=6~8aUkKT2?Q^gFu*zCue58W&myUzb{+dKfeyara>j&>Tyiw$!gQ@bp{a5Cy6w&>o#e1JO+&m5Y0W$dE(mSD_jN$lDAIcY*kaiI791?CgPTvYAxc1zq8nWM7((>J-GD#*)G8IX<ut9U(Tfi8?>n}8S?o-PkIo+dR885w!|NQSG%)T*lgn|0@#V_qfqk^KdafPLbLvHur30bTRDb8HDaXV2wWker8;$#=E(H`LfguFddEscZZIehPepF^LjFWrelFv1CQG=yG4Ea=SFE_ap`D~|aYrT;B(fIAj8RrgO-&LsYyg~Kz&4~NLRD0pS&lw^H2qCN%?V8K#4JM*Vu#%7uwKxa@4xmfXo`qvT?|xp_G({_vyN9BMlKI}sQ4>zb;$cw4$JGY$b!&!6zHmO8j@5V^?cx&c;~FE`N}kLIBPN+C|D-B-cm4GCr4h;o7&TwYpP|oEn0JZ5&ZMkMZ#C&^)`yQA~-e_EoMQmcYj-V(a~c3JikCNmEI?+eFk2Iss41}gZ`6#v(o;>^$h2Uqbp|hxNg4{Oa)a`geVVHP$nU8S$5=i44-nhv~(76r%c4-i5&`CA#Az6V{O0+0Eayl=%kv0TN>^mT#wexJxWS|i_}<=CiIYEcLk5SLkh*yQp<-?VD&{wZbPlG8aX`i6mYJtVJ}Uj(VJjAbOcd}zdvfyTW(w!_K0sRXpeCTculWau~VnpeQ{%=(o38$Q#E@MK<NX~v%S;bV$9{Sg61bxWuY*Gw~|4Xd5YSP3@Qk-69daq6^1u`H0!^HxnA)GU)M*N<RdWi1FqxW{jPxVR&`XIf_*$KoM0Kh<59hy0sq`F00gMYO=kkA#GnpY+$3P)yl~+^X<~h7!8msmK{eac1~Rc&vWJjVV1pMJ?4L|LWglOVmBZT%tl%y+Lvn_Zjw&mW<wwT7!j9W1YAZ^4bl{p9vbC0Bt#kHEi;8zG_xL5OaP>=Ry5CfQ<F4Jj3JrMX3?stxm!ig(P&yD+Ier7JdCuPtF_`}9SBw^D7@U99<y~OcrA@U_{ymOApHnn&XZ%;W{4o88wNJT^&C4;1tjE`II&N1o1gGJ-ZUhM(Vw`G<)FMaiIJ<{kXIt3_4_ZIoJf9hfaO36kPMm-R^u!BaCqP}`?4AF)hzod0I!p8GLHk$8(8_UhXenKD=lM1^sdTQhkcd$yPe8rN3Jk~2XK$d3IRj!<eqi)W<0210H`d*K4oi0+nNOY@8jq!dU-}x**As_S+*xFTl4qdgMt>0My2dxv++XO2-o5ACTn;~{DI$y2=Dst^6ZcypnZPQTM=-WHQWtK^_8%>Si9wzbF6*8meH*X`8UJPcTw-SUt)n_)z&7`mCAXJDr>c87FwfE(`Gp7G@JDL_lyf{W@w^x@l9(vL0{r}GrffcPYONHr!nEHH1Jd0_$EXR9o~+OKu#}g`2ad&ne(OtUH94RG2}tX}KgEqT>Re!~{7%g<r7~qwEMu)0X5yC(@f9Fmb%9O<8UpK<paB1l<uS22F%O^%P}$_=CAzDB99V(|e8_a%H#X=a5rh{<h)0c9P!&J6ax~hxo-9B#N?%25A>}4#$pSz8R!c%@bF9Xd1|IZANp#W}l58esZ}~{VO-lUZ2XExZx!YNtaAhql;#Xfy<ojoO@miJ#X_-90g0Bm$?d5DD)Y{$Je(n_pXH2sOYcY8@;9)*D!oDbD3~SCL^|F^v$T7fDqSgBAaxer&4+ko;m-^(p1BDR_7F<WZL$Su`ffORTAL4cn=Py0T4q@^Njub08Wuc$^5XEN*OC(l(!(RP};?Vl};>`Lx0kKB5JeRP^7r42)Uh-v+#ARsS;7z30EDSkUm+~0@TerUIcT2q;Qu*}sqI&-y1%1~2)5g=HLStwSkNEut@Vt0Jto0>(gIG%A{*HO2jWd0hM06;)GD(l?kq4Pr1>orDoEE$O`8xby7b0$#3?tKOnM=@9Kyr}e;|TIaOulOh`{&>Ay~1Zh%!x2FbkotxWx`sw@~;Cg@f`~+%u`0grl#TEA|dwL7F_f#P8A5n$ylNOl9wc~d|T1h2=h_a_e8e{TPHy$LD%IchyUQ*#T2|Pz~!f-0o^}N2$;s^K|L|R7?S`te2Dq2BUTh@yR$-)>2{Qq5o!3~Uj7076RRCpu_t}1V(mO|orHVK0YvD1gA<{)0h2~YLx8js$6|_ZO+)f~SDN&~+y=Tv^`^_3BT+DzOEF1sdM|YK9x>!uUvk4|u!T>4I}x;?t7UkX2~K#!mwS!F_feh$l~v{s>P6JS6cpey&>;#Dp`i`deP|2<Hp|@_JohW!2%b7vai%=yzutk*I)%nZ$qYqFH`WW>upN4G{My0KT!OX(D)igy@*>Dri>rw~m{V#c>4>`s4LT&D2$ZX!gywLqp=RHz3U62!2vX{TMqiM(UebQ6P;ryBhz$5c5ik(<M)EdLG!$%-UhK8xz`jJYT!Q|-1Hx3g<Uw1Fw-(UQ_Fw#9BD<pl!R4}aNJ`1{=|9m4a1&7%cEGEC^7GVUh1abrvLODaZPzk+;JUg%n>hB%#p%7b3u1G8sntD0-Um+=^eh_|VZr%)eB%TJZR6nflkM+v;9Gtk*>@I?ZE7F7Hw^pxQ38Q!JNgs(FpvsM$I(j|1!0$n%m8H)VlTP=WSvvu=JD$=V>R6e3P?HJ^}BVMMbVV^xNWVAU1PJ5@sj!1>nBrL&ZO;z2(5)HL2&#{HGsj~vRrktf9Vwf;wj@0>5ko)%J3WBVDt>dE|BmmGAFulRcxidl<7)6XT4>dy15v4FXveQ2~86$e2hc+^;DZlzPM!D_yHQYRQi59W!Xx9pDUqE{RY%k>SCgP!>**TH$Dk>*^A%&jz%7NrH{-te7e}*mfXdH`@Fn22zYFwDKZ}@gm*T>p*UaYM@bfrz>B7YYjt;`HVMGcLFTWWCu3S7X9%!oNG_`C$tR7Fh9#XI1G=jIPx$zQH8&foAyLywjqw9{1lc-{O`EP*pKKEk9BVySgiA_D=#f`^q%YhsgJJDHzx}Dw%haf@(KBlfQjIUK;lzDg0Z#MdJ{?uRF$<$9(tL0dX=3(`aix=lHhIAv<XH1Jd|;V)eVsmFk!<2Ir2u^t?bHncXv8Q@t1y4$oX9b4x8^uTgKi~NJTf8w;hrdX7GIPgJss;8mK-Wy!4r650B$S>k#y;Y3K7yyRxu=tvqO&u&v&Y*=ITz(1bk^#%dtyss!5WIVSN?X=DhElHhgSx`4No0LlWJ}xe7L~h~FWj=Flf$yK`HQ1vL-?uHB6b%diNWSO2mvbL89{i)EJ5%a$h)0)I^h;DUe*Yi9Q@_Hn)UM!Q+cmk-{Su{?^;mnA8maz&KX{?y=y8P5*=ynEsu#*7~VSMvXB`SC(=!e7HpHX|^6_~Md-y9jrBv>&DwD|k!Krf_$zPEUvkMml^^dKVy~f2q=S1SdAk<zN65Jsg5-aag`?yIRU~`|iOzg42yS1XA@2Bp^^8^pr?f>wxLmRhRBK(_Q=8H5*@h0w63}^NX^+9G2oKH69i_z4gD;-u2L>&OpabsQICP=I}CG(<W-f#>@Hwpp@)mqt+3qYC!lT40@~O1ee)e^8EKQevyFEFw+i0Bb3bsH3OuT)(K6~6plr9#;#?Y04ENl(UCv5+ljVnO&Nc6`+dABXVGWftbqORo3PbXolZM<1WuMu+|=p6bJc|giIfmxPEqy~v!h@3P2GQ+G0i(R_j%2m`Wi)Gf1IJ&z1*-|c&>{XOZS9FiE8V<t2G!$=NTw>m9tj$XDZ2PjD73%WrC2+%4x}3hZ@BP;yIMsR@AP&PSRm?{8Y-D*I!^aqlSZinirP_P+%J<5W}bZs$BhS&PkaL%icQTF5x7+DVn<N(bn)O03odVZ=+<e2XqKLv2krm5kyB1&@C>W1Iu-pgLGi=#;HXhy+b?ah_jjk`Ed~y{HDVNEG!#PhiL-t&;ruq6$!V)`2WoxXNyZ7FMIQn$lzz~CHFZ`3|=(z1YGYUJP=r`-H7iPFTUd4f({))3QpyV%sLn~1UTrf&(h)OegG`05$pL|fSvy&7PlbmD_22i*XTvATO)7R=AnSs^aJq6?2@O!Bs}YKCj_f73(kbldS5)6baecG%EusBWJzU&WtfF=PLZ}uV;=Z!El#>@9W?)^%f^*c{mkDoUNpXF<bd<Az}gfz?bO6W%WN)iRDS-mdG`2E8Iliof`3r)D;fo$r<)FKJS_N91WplPb^tIw5Zg!fisB<dqX9UXq(FhsfRjf$0=x)b(fFbX<}*HS-F6Cn+6;ox&*e$xaCA%HI-<hOs~YiaP}gjJx^(}!Db;8%3jH<fKx_uGW~n5=E|hc})#+6YLu{qqZ2r$39xd4%JQgmgAAKn^XNDsZSAw(lyGs<0*eI%KI3L=@$e6`1JAo#d>s-Y}py_}--D#Dj_s0!pf*ZI^V5NOXWG9ov>K>JG9V`8a71HhhSfvm!F3riHkQV25MS73CX64MBD!lx+J)^wac^kY;RwQXO+uz98V@yzg045IM=p#;ZwH?F5aYd5xMHbTMh%_QRqc=3g(8JwpaT2XKxxB?wRWd8b>!N?PC3YlyYtMfg5NX|}7eHzaP0W;h{gQJs=R7X#Y&<_9WTzTz$7&qHq2n4ZxX?LQEUKT?>7AxD1T_B3aGwWjv>-ZEw2JptD?u4?$1mj^7NEa&-SRw>&RwaA)h!u0(|YpDJ70}qJvH$wd2&PD({PoyT;*X5U^9h2mvkh6`<Me-Km>uch2aBw9<<QUcR#Ksvi}CjYDnmvJHq@pY0yfYyRnmb&cxE_3;Fs_q`!+3R$NXtB&Xn<$-?O1F)yVcxJnUeSuD_;nl?dc;>O58;3mx32?D1n=cIRB3aw|$JZZ2(ynQ@lY!1A15uQ`j4f*9<GLCZ5nS6^8^O@`)%I-AvyG#gr?mBc#D3R?6kVUR4iMdO>Unl<ew%b1Zz+X<2bw7##<%T_8YW~@?w9GNjJOEwJ@Wv^XnZW-+5uhijoQUoqrS5^6EI$>c4y+vS98z|?=q$4s!>;wbx1tusyLl33$R*v&XpRxifV*J_sD8A#|6lW7mmC9fSKKo+pnH>)8h{Vj4j$gR-T$>Mpi!=9AJ;9C|NTu&haf<{d07eOl0UZy)DJ>4lwLuIjsFU3iR8f(D|vG^)as{@@yHWFUqbPERoCwfluhhx&wLuF2gV~$urwkYMR-wqIXr`Dn5uo5I7aRW=Ey%M$P6Jt<0;Hb-?;i>?ndy~{&zwt9|QrbpPijl{`+5CP6}q~J>-`MkpLN3Fh{HSY+E%%v35jM88$n2e~mW#Z9ZD_M@b$oR)QHK`w$5n>hp!|Ybg3L>V!uBNQHOkiTto`S&Um5!iAIzY+I{hsQQ0^#di%F6GKDJTSXg(d18jL58!r8heS)k?#{UtdG1=5(<A@dnQpeUcQoO94t^o770jO4DP|o6k`U$&8J8GQFchq-`}I!cEN~|6@U|MP#6rh`2mx6>jFr?C`}tS9ulX5Ph56|XNW#c0^xr0_(7-T5(rnfdFY&K_d`MN%{-zd<H`!la^9z1Ax<C9^qzeOaU2Q;n-s|g#!@TkAXCDY%@p1`#g9ZH;$c^~cC=_?;W^w!YBSg+!4|ewSLdXIps4}B&;`TyBUQ9whGcqcX)IQzHIxZI`FQxm`v;Fr^s<<#%@dO|9(EAshfgCx*ookZu8diVNP(%>_2L<<@LR}3yU0mGPeU)qA2MVTe{Z8#Sp^|u`UGdNNoXhl&HX05yo&El`iy&ITU8Wq}TBYIy$4_9ddUu+UCB*kfXU8T!O~=PV4$EntQEP-}7Q(0#ce8JutWzo${j|0zS9;y*GMI^;Ae~Kqjo!(XB*p|AI-qEABu#{|LS}1kObMyEptWn8WSnw&?xiV{&Qy^Z&A@@)wM(aR&lE;SJ@j#WY8JBQHQz@233#!AxvqjtX*T)$zBhs!z<c4(P<Heo2UmKXq#g8IVYdmJE-?Rmtsh38Sw6jqkO*v#X^Ctk3W7|<#m&4k4dlU6IEFNYB44SFl(Cv0QB)aYyEF8nO5@F+fxYu&PvBvfp1fTIgSqKlj)5No4AD)KO@VW6f;M@}hutSAh%<2`4Ut=Ts<eKYka%}ujcsl-T-K#TiQ|WD{C6jZXV`F=_SSBHKC{6;dX1pVje+T-ht4#9H><H<l0E1DjcX;EE|fd;ikbO=^o{O~DQKFbaf)XUPezGr1WcfYbqHmTzE|W!i*}@(ZXKs$tv7Ie*7kILf^~zDgbQtuXBhF1o|R)%imf?X)P~oR--dysg>JOX3aSm1#LV^+>1u!@UXl`&9=655RVBw%{Rncyxl>dG|ENa~Y<`1{N{GrYLv*wRe&l3Vh>J60`7a-;6>ViVYPG9_%5SHIlZS3cMg~-aX6{LwAdTmHEeLLse2Zdq_BM!y*ohl-C3dlIi%D|SONNPNaAkAz4`}O`g(@V&i2;V{k%?0?Jcn>I4Urf$Nwf!RgN?O2k_4d', c1='df1cf736992ad537', c2='969d8e97b81f65ae'):
    try:
        # 完整性校验
        if hashlib.sha256(data.encode()).hexdigest()[:16] != c1:
            raise ValueError('Primary integrity check failed')
            
        # 解密过程
        stage1 = base64.b85decode(data)
        if hashlib.blake2b(stage1).hexdigest()[:16] != c2:
            raise ValueError('Secondary integrity check failed')
            
        stage2 = custom_decode(stage1)
        stage3 = zlib.decompress(stage2)
        return marshal.loads(stage3)
    except Exception as e:
        raise RuntimeError(f'Decryption failed: {str(e)}')

# 执行解密后的代码
exec(decrypt())
